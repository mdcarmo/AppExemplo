//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppExample.Mvc.ContactService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactDto", Namespace="http://schemas.datacontract.org/2004/07/AppExample.Service.Dto")]
    [System.SerializableAttribute()]
    public partial class ContactDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContactService.IContactService")]
    public interface IContactService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddContact", ReplyAction="http://tempuri.org/IContactService/AddContactResponse")]
        void AddContact(AppExample.Mvc.ContactService.ContactDto contactDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddContact", ReplyAction="http://tempuri.org/IContactService/AddContactResponse")]
        System.Threading.Tasks.Task AddContactAsync(AppExample.Mvc.ContactService.ContactDto contactDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/UpdateContact", ReplyAction="http://tempuri.org/IContactService/UpdateContactResponse")]
        void UpdateContact(AppExample.Mvc.ContactService.ContactDto contactDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/UpdateContact", ReplyAction="http://tempuri.org/IContactService/UpdateContactResponse")]
        System.Threading.Tasks.Task UpdateContactAsync(AppExample.Mvc.ContactService.ContactDto contactDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DeleteContact", ReplyAction="http://tempuri.org/IContactService/DeleteContactResponse")]
        void DeleteContact(AppExample.Mvc.ContactService.ContactDto contactDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DeleteContact", ReplyAction="http://tempuri.org/IContactService/DeleteContactResponse")]
        System.Threading.Tasks.Task DeleteContactAsync(AppExample.Mvc.ContactService.ContactDto contactDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/FindById", ReplyAction="http://tempuri.org/IContactService/FindByIdResponse")]
        AppExample.Mvc.ContactService.ContactDto FindById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/FindById", ReplyAction="http://tempuri.org/IContactService/FindByIdResponse")]
        System.Threading.Tasks.Task<AppExample.Mvc.ContactService.ContactDto> FindByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/FindAll", ReplyAction="http://tempuri.org/IContactService/FindAllResponse")]
        System.Collections.Generic.List<AppExample.Mvc.ContactService.ContactDto> FindAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/FindAll", ReplyAction="http://tempuri.org/IContactService/FindAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AppExample.Mvc.ContactService.ContactDto>> FindAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/FindByName", ReplyAction="http://tempuri.org/IContactService/FindByNameResponse")]
        System.Collections.Generic.List<AppExample.Mvc.ContactService.ContactDto> FindByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/FindByName", ReplyAction="http://tempuri.org/IContactService/FindByNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AppExample.Mvc.ContactService.ContactDto>> FindByNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContactServiceChannel : AppExample.Mvc.ContactService.IContactService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContactServiceClient : System.ServiceModel.ClientBase<AppExample.Mvc.ContactService.IContactService>, AppExample.Mvc.ContactService.IContactService {
        
        public ContactServiceClient() {
        }
        
        public ContactServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddContact(AppExample.Mvc.ContactService.ContactDto contactDto) {
            base.Channel.AddContact(contactDto);
        }
        
        public System.Threading.Tasks.Task AddContactAsync(AppExample.Mvc.ContactService.ContactDto contactDto) {
            return base.Channel.AddContactAsync(contactDto);
        }
        
        public void UpdateContact(AppExample.Mvc.ContactService.ContactDto contactDto) {
            base.Channel.UpdateContact(contactDto);
        }
        
        public System.Threading.Tasks.Task UpdateContactAsync(AppExample.Mvc.ContactService.ContactDto contactDto) {
            return base.Channel.UpdateContactAsync(contactDto);
        }
        
        public void DeleteContact(AppExample.Mvc.ContactService.ContactDto contactDto) {
            base.Channel.DeleteContact(contactDto);
        }
        
        public System.Threading.Tasks.Task DeleteContactAsync(AppExample.Mvc.ContactService.ContactDto contactDto) {
            return base.Channel.DeleteContactAsync(contactDto);
        }
        
        public AppExample.Mvc.ContactService.ContactDto FindById(System.Guid id) {
            return base.Channel.FindById(id);
        }
        
        public System.Threading.Tasks.Task<AppExample.Mvc.ContactService.ContactDto> FindByIdAsync(System.Guid id) {
            return base.Channel.FindByIdAsync(id);
        }
        
        public System.Collections.Generic.List<AppExample.Mvc.ContactService.ContactDto> FindAll() {
            return base.Channel.FindAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AppExample.Mvc.ContactService.ContactDto>> FindAllAsync() {
            return base.Channel.FindAllAsync();
        }
        
        public System.Collections.Generic.List<AppExample.Mvc.ContactService.ContactDto> FindByName(string name) {
            return base.Channel.FindByName(name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AppExample.Mvc.ContactService.ContactDto>> FindByNameAsync(string name) {
            return base.Channel.FindByNameAsync(name);
        }
    }
}
